name: z- retag docker image

on:
  workflow_call:
    inputs:
      source-tag:
        type: string
        required: true
      new-tag:
        type: string
        required: true

      array-docker-context:
        type: string
        required: true
      array-image-config:
        type: string
        required: true



    secrets:
      ECR_ACCOUNT_ID:
        required: true
      ECR_ROLE_NAME:
        required: true
      ECR_REGISTRY_REGION:
        required: true
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_PROJECT_ID:
        required: true
      GCP_SERVICE_ACCOUNT:
        required: true

jobs:

  build-and-push-to-ecr:
    runs-on:
      group: larger-runners
    strategy:
      matrix:
        docker-context: ${{ fromJSON(inputs.array-docker-context) }}
        image-config: ${{ fromJSON(inputs.array-image-config) }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Unpack array-docker-context
        id: unpack-docker-context
        run: |
          IFS='|' read -ra DOCKER_CONTEXT_PAIR <<< "${{ matrix.docker-context }}"
          echo "D_CONTEXT=${DOCKER_CONTEXT_PAIR[1]}" >> $GITHUB_ENV
          echo "IMAGE_REPOSITORY=${DOCKER_CONTEXT_PAIR[0]}" >> $GITHUB_ENV

      - name: Unpack array-image-config
        id: unpack-image-config
        run: |
          IFS='|' read -ra IMAGE_CONFIG_PAIR <<< "${{ matrix.image-config }}"
          echo "REGISTRY_PROVIDER=${IMAGE_CONFIG_PAIR[0]}" >> $GITHUB_ENV
          echo "IMAGE_REGISTRY=${IMAGE_CONFIG_PAIR[1]}" >> $GITHUB_ENV
          echo "SHOULD_USE_PUBLIC_ECR=${IMAGE_CONFIG_PAIR[2]}" >> $GITHUB_ENV

      - name: Print unpacked environment variables (Optional for debugging)
        run: |
          echo "D_CONTEXT=$D_CONTEXT"
          echo "IMAGE_REPOSITORY=$IMAGE_REPOSITORY"
          echo "REGISTRY_PROVIDER=$REGISTRY_PROVIDER"
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY"
          echo "SHOULD_USE_PUBLIC_ECR=$SHOULD_USE_PUBLIC_ECR"


      - name: Set private ECR if disabled
        if: ${{ env.REGISTRY_PROVIDER == 'aws' && env.SHOULD_USE_PUBLIC_ECR != 'true' }}
        run: |
          echo "IMAGE_REGISTRY=${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.ECR_REGISTRY_REGION }}.amazonaws.com/" >> $GITHUB_ENV

      - name: Set google registry (hard coded region for now)
        if: ${{ env.REGISTRY_PROVIDER == 'gcp' }}
        run: |
          echo "IMAGE_REGISTRY=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/" >> $GITHUB_ENV


      - name: Set source and new image names
        run: |
          echo "SOURCE_IMAGE=${{ env.IMAGE_REGISTRY }}${{ env.IMAGE_REPOSITORY }}:${{ inputs.source-tag }}" >> $GITHUB_ENV
          echo "TARGET_IMAGE=${{ env.IMAGE_REGISTRY }}${{ env.IMAGE_REPOSITORY }}:${{ inputs.new-tag }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.ECR_ACCOUNT_ID }}:role/${{ secrets.ECR_ROLE_NAME }}
          aws-region: ${{ secrets.ECR_REGISTRY_REGION }}
          role-session-name: GitHubActions

      - name: Login to PUBLIC Amazon ECR
        if: ${{  env.REGISTRY_PROVIDER == 'aws' &&  env.SHOULD_USE_PUBLIC_ECR == 'true' }}
        env:
          AWS_REGION: us-east-1
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Login to PRIVATE Amazon ECR
        if: ${{  env.REGISTRY_PROVIDER == 'aws' && env.SHOULD_USE_PUBLIC_ECR != 'true' }}
        id: login-ecr-private
        uses: aws-actions/amazon-ecr-login@v2

      - id: google-auth
        if: ${{ env.REGISTRY_PROVIDER == 'gcp' }}
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: access_token

      - name: Log into GitHub Artifact Registry
        if: ${{ env.REGISTRY_PROVIDER == 'gcp' }}
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.google-auth.outputs.access_token }}


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Re-tag Docker image
        run: |
          docker buildx imagetools create -t ${{ env.TARGET_IMAGE }} -t ${{ env.SOURCE_IMAGE }} ${{ env.SOURCE_IMAGE }}
         
