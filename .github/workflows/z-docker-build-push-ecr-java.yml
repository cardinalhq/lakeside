name: z- Docker build and push a Go project to ecr

on:
  workflow_call:
    inputs:

      tag-to-release:
        type: string
        required: true
      docker-release-tag:
        type: string
        required: true
      latest-tag:
        type: string
        required: true


      array-docker-context:
        type: string
        required: true
      array-image-config:
        type: string
        required: true


    secrets:
      ECR_ACCOUNT_ID:
        required: true
      ECR_ROLE_NAME:
        required: true
      ECR_REGISTRY_REGION:
        required: true
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_PROJECT_ID:
        required: true
      GCP_SERVICE_ACCOUNT:
        required: true


jobs:

  build-and-push-to-ecr:
    runs-on:
      group: larger-runners
    strategy:
      matrix:
        docker-context: ${{ fromJSON(inputs.array-docker-context) }}
        image-config: ${{ fromJSON(inputs.array-image-config) }}
    permissions:
      id-token: write
      contents: read

    steps:

      - name: Unpack array-docker-context
        id: unpack-docker-context
        run: |
          IFS='|' read -ra DOCKER_CONTEXT_PAIR <<< "${{ matrix.docker-context }}"
          echo "D_CONTEXT=${DOCKER_CONTEXT_PAIR[1]}" >> $GITHUB_ENV
          echo "IMAGE_REPOSITORY=${DOCKER_CONTEXT_PAIR[0]}" >> $GITHUB_ENV

      - name: Unpack array-image-config
        id: unpack-image-config
        run: |
          IFS='|' read -ra IMAGE_CONFIG_PAIR <<< "${{ matrix.image-config }}"
          echo "REGISTRY_PROVIDER=${IMAGE_CONFIG_PAIR[0]}" >> $GITHUB_ENV
          echo "IMAGE_REGISTRY=${IMAGE_CONFIG_PAIR[1]}" >> $GITHUB_ENV
          echo "SHOULD_USE_PUBLIC_ECR=${IMAGE_CONFIG_PAIR[2]}" >> $GITHUB_ENV

      - name: Print unpacked environment variables (Optional for debugging)
        run: |
          echo "D_CONTEXT=$D_CONTEXT"
          echo "IMAGE_REPOSITORY=$IMAGE_REPOSITORY"
          echo "REGISTRY_PROVIDER=$REGISTRY_PROVIDER"
          echo "IMAGE_REGISTRY=$IMAGE_REGISTRY"
          echo "SHOULD_USE_PUBLIC_ECR=$SHOULD_USE_PUBLIC_ECR"


      - name: Set private ECR if disabled
        if: ${{ env.REGISTRY_PROVIDER == 'aws' && env.SHOULD_USE_PUBLIC_ECR != 'true' }}
        run: |
          echo "IMAGE_REGISTRY=${{ secrets.ECR_ACCOUNT_ID }}.dkr.ecr.${{ secrets.ECR_REGISTRY_REGION }}.amazonaws.com/" >> $GITHUB_ENV

      - name: Set google registry (hard coded region for now)
        if: ${{ env.REGISTRY_PROVIDER == 'gcp' }}
        run: |
          echo "IMAGE_REGISTRY=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ inputs.tag-to-release }}

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: java-build-libs

      - name: List all build/libs directories and their contents
        run: |
          echo "Listing all build/libs directories and their contents:"
          find . -type d -path '*/build/libs' -exec echo "Directory: {}" \; -exec ls -l {} \;

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.ECR_ACCOUNT_ID }}:role/${{ secrets.ECR_ROLE_NAME }}
          aws-region: ${{ secrets.ECR_REGISTRY_REGION }}
          role-session-name: GitHubActions

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: Login to PUBLIC Amazon ECR
        if: ${{  env.REGISTRY_PROVIDER == 'aws' &&  env.SHOULD_USE_PUBLIC_ECR == 'true' }}
        env:
          AWS_REGION: us-east-1
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Login to PRIVATE Amazon ECR
        if: ${{  env.REGISTRY_PROVIDER == 'aws' && env.SHOULD_USE_PUBLIC_ECR != 'true' }}
        id: login-ecr-private
        uses: aws-actions/amazon-ecr-login@v2

      - id: google-auth
        if: ${{ env.REGISTRY_PROVIDER == 'gcp' }}
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: access_token

      - name: Log into GitHub Artifact Registry
        if: ${{ env.REGISTRY_PROVIDER == 'gcp' }}
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.google-auth.outputs.access_token }}



      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          context: ${{ env.D_CONTEXT }}
          push: true
          build-args: |
            APP_VERSION=${{ inputs.tag-to-release }}
            BUILDER_REPO=${{ env.IMAGE_REGISTRY }}${{ env.IMAGE_REPOSITORY }}
          tags: |
            ${{ env.IMAGE_REGISTRY }}${{ env.IMAGE_REPOSITORY }}:${{ inputs.docker-release-tag }}
            ${{ env.IMAGE_REGISTRY }}${{ env.IMAGE_REPOSITORY }}:${{ inputs.latest-tag  }}
            
